#include <bits/stdc++.h>

using namespace std;

// 这个函数用来解决每一个测试用例
void solve()
{
    // 输入两个整数 n 和 x
    // n 表示要生成的数组长度
    // x 是一个给定的数字，用于后续计算
    int n, x;
    cin >> n >> x;

    // 如果数组长度为1，直接输出x并返回
    if (n == 1)
    {
        cout << x << "\n";
        return;
    }

    std::vector<int> ans(n);
    
    // 创建一个长度为n的数组来存储结果
    // sum用来存储按位或的结果
    // max记录最大可用的数字
    // val存储最终的按位或结果
    int sum = 0, max = 0, val = 0;

    // 这个循环用位运算来找到最大的可用数字
    // |= 是按位或运算，比如 5|3 = 7 (二进制：101|011 = 111)
    // & 是按位与运算，用来检查结果是否合法
    for (int i = 0; i < n; ++i)
    {
        sum |= i;  // 累积按位或的结果
        if ((sum & x) == sum)  // 检查结果是否满足条件
        {
            max = i;  // 更新最大可用数字
            val = sum;  // 保存当前的按位或结果
        }
    }

    // 特殊情况处理：如果最大数是n-1但结果不满足条件
    // 就把最大数减少1
    if (max == n - 1 && (val & x) != x)
    {
        --max;
    }

    // 从大到小填充数组的前半部分
    int i = 0;
    while (i < n && max >= 0)
    {
        ans[i] = max--;  // 依次放入递减的数字
        ++i;
    }

    // 如果数组还没填满，剩余位置都填入x
    if (i < n)
    {
        for (int j = i; j < n; ++j)
        {
            ans[j] = x;
        }
    }

    // 输出结果数组
    // [i == n - 1]是一个技巧，用来在最后一个数字后输出换行，其他数字后输出空格
    for (int i = 0; i < n; ++i)
    {
        cout << ans[i] << " \n"[i == n - 1];
    }
}

// 主函数：处理多个测试用例
int main(){
    int t;  // 测试用例的数量
    cin >> t;
    while(t--){  // 循环处理每个测试用例
        solve();
    }
}
